name: Build and Deploy to AWS

on:
  push:
    branches: [ "master" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # --- CI: Build and Push to ECR ---
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push to Amazon ECR
        id: build-image
        run: |
          docker build -t user-service .
          docker tag user-service:latest ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest

      # --- Network Diagnostics ---
      - name: Test Network Connectivity
        run: |
          echo "Testing connection to ${{ secrets.EC2_IP }}:22"
          nc -zv -w 5 ${{ secrets.EC2_IP }} 22 || echo "Connection failed"
          ping -c 3 ${{ secrets.EC2_IP }}

      # --- SSH Key Verification ---
      - name: Verify Key Format
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          echo "Key starts with: $(head -c 20 key.pem)"
          echo "Key ends with: $(tail -c 20 key.pem)"
          echo "Key length: $(wc -c < key.pem) bytes"

      # --- SSH Connection Test ---
      - name: Test SSH Connection to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem
          ssh-keyscan -H ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts 2>/dev/null
          ssh -v -i key.pem \
            -o StrictHostKeyChecking=no \
            -o ConnectTimeout=30 \
            ec2-user@${{ secrets.EC2_IP }} \
            "echo 'SSH success!'; docker ps"

      # --- CD: Deploy to EC2 ---
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 60s
          script: |
            # Pull Docker image
            aws ecr get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            docker pull ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest

            # Stop old container
            docker stop user-service || true
            docker rm user-service || true

            # Run new container with DB config
            docker run -d \
              --name user-service \
              -e SPRING_DATASOURCE_URL="jdbc:postgresql://user-service-db.cen6mm82657u.us-east-1.rds.amazonaws.com:5432/user_service_db" \
              -e SPRING_DATASOURCE_USERNAME="app_user" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -p 8080:8080 \
              ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest

      # --- Fallback: Alternative Deployment ---
      - name: Deploy via SSH Agent (Fallback)
        if: ${{ failure() }}
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy via SSH Agent
        if: ${{ failure() }}
        run: |
          ssh -v ec2-user@${{ secrets.EC2_IP }} << 'EOF'
            aws ecr get-login-password --region us-east-1 | \
              docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            docker pull ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest
            docker stop user-service || true
            docker rm user-service || true
            docker run -d \
              --name user-service \
              -e SPRING_DATASOURCE_URL="jdbc:postgresql://user-service-db.cen6mm82657u.us-east-1.rds.amazonaws.com:5432/user_service_db" \
              -e SPRING_DATASOURCE_USERNAME="app_user" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              -p 8080:8080 \
              ${{ steps.login-ecr.outputs.registry }}/myproject/user-service:latest
          EOF
