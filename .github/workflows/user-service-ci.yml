name: User-service Docker Image CI/CD to AWS

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1. Checkout Code
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configure AWS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login to ECR
      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v1

      # 4. Build and Push
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} .
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          docker tag ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      # 5. Verify EC2 Connectivity
      - name: Validate EC2 Access
        run: |
          echo "Testing SSH to EC2..."
          for i in {1..5}; do
            if nc -zv -w 5 ${{ secrets.EC2_IP }} 22; then
              echo "✅ EC2 is reachable"
              exit 0
            fi
            echo "Attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          done
          echo "❌ ERROR: Could not connect to EC2 after 5 attempts"
          exit 1

      # 6. Deploy to EC2
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script_timeout: 10m
          script: |
            # Directly use the secrets instead of env vars
            IMAGE_REF="${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}"
            
            # Ensure Docker is available
            sudo systemctl start docker || true
            
            # Cleanup previous container
            docker stop my-app || true
            docker rm my-app || true
            
            # Pull with retry logic
            for i in {1..5}; do
              if docker pull "$IMAGE_REF"; then
                break
              fi
              echo "Pull attempt $i failed. Retrying in 10 seconds..."
              sleep 10
              [ $i -eq 5 ] && exit 1
            done
            
            # Run new container
            docker run -d \
              --name my-app \
              --restart unless-stopped \
              -p 80:8080 \
              "$IMAGE_REF"
            
            # Verify container started
            sleep 5
            docker ps --filter "name=my-app" --format "{{.Status}}" | grep -q "(healthy\|running)" || (echo "Container failed to start"; exit 1)
            
            # Cleanup old images
            docker image prune -af --filter "until=24h"